Zeichenketten
=============

Die Verarbeitung von Zeichenketten ist eine der St√§rken von Python. Es gibt
viele Optionen zur Begrenzung von Zeichenketten:

.. code-block:: python

   "Eine Zeichenfolge in doppelten Anf√ºhrungszeichen kann 'einfache Anf√ºhrungszeichen' enthalten."
   'Eine Zeichenfolge in einfachen Anf√ºhrungszeichen kann "doppelte Anf√ºhrungszeichen" enthalten.'
   """\tEine Zeichenkette, die mit einem Tabulator beginnt und mit einem Zeilenumbruchzeichen endet.\n"""
   """Dies ist eine Zeichenkette in dreifach doppelten Anf√ºhrungszeichen, die
   einzige Zeichenkette, die echte Zeilenumbr√ºche enth√§lt."""

Zeichenketten k√∂nnen durch einfache (``' '``), doppelte (``" "``), dreifache
einfache (``''' '''``) oder dreifache doppelte (``""" """``) Anf√ºhrungszeichen
getrennt werden und k√∂nnen Tabulator- (``\t``) und Zeilenumbruchzeichen (``\n``)
enthalten. Allgemein k√∂nnen Backslashes ``\`` als Escape-Zeichen verwendet
werden. So kann :abbr:`z.B. (zum Beispiel)` ``\\`` f√ºr einen einzelnen Backslash
und ``\'`` f√ºr ein einfaches Anf√ºhrungszeichen verwendet werden, wodurch es die
Zeichenfolge nicht beendet:

.. blacken-docs:off

.. code-block:: python

   "You don't need a backslash here."
   'However, this wouldn\'t work without a backslash.'

.. blacken-docs:on

Hier sind weitere Zeichen, die ihr mit dem Escape-Zeichen erhalten k√∂nnt:

+--------------------------+--------------------------+--------------------------+
| Escape-Sequenz           | Ausgabe                  | Erl√§uterung              |
+==========================+==========================+==========================+
| ``\\``                   | ``\``                    | Backslash                |
+--------------------------+--------------------------+--------------------------+
| ``\'``                   | ``'``                    | einfaches                |
|                          |                          | Anf√ºhrungszeichen        |
+--------------------------+--------------------------+--------------------------+
| ``\"``                   | ``"``                    | doppeltes                |
|                          |                          | Anf√ºhrungszeichen        |
+--------------------------+--------------------------+--------------------------+
| ``\b``                   |                          | Backspace (``BS``)       |
+--------------------------+--------------------------+--------------------------+
| ``\n``                   |                          | ASCII Linefeed ``(LF``)  |
+--------------------------+--------------------------+--------------------------+
| ``\r``                   |                          | ASCII Carriage Return    |
|                          |                          | (``CR``)                 |
+--------------------------+--------------------------+--------------------------+
| ``\t``                   |                          | Tabulator (``TAB``)      |
+--------------------------+--------------------------+--------------------------+
| :samp:`\u{00B5}`         | ``¬µ``                    | Unicode 16 bit           |
+--------------------------+--------------------------+--------------------------+
| :samp:`\U{000000B5}`     | ``¬µ``                    | Unicode 32 bit           |
+--------------------------+--------------------------+--------------------------+
| :samp:`\N{{SNAKE}}`      | ``üêç``                   | Unicode Emoji name       |
+--------------------------+--------------------------+--------------------------+

Eine normale Zeichenkette kann nicht auf mehrere Zeilen aufgeteilt werden. Der
folgende Code wird nicht funktionieren:

.. code-block::

   "Dies ist ein fehlerhafter Versuch, einen einen Zeilenumbruch in
   eine Zeichenkette einzuf√ºgen, ohne \n zu verwenden."

Python bietet jedoch Zeichenketten in dreifachen Anf√ºhrungszeichen (``"""``),
die dies erm√∂glichen und einfache und doppelte Anf√ºhrungszeichen ohne
Backslashes enthalten k√∂nnen.

Zeichenketten sind au√üerdem unver√§nderlich. Die Operatoren und Funktionen, die
mit ihnen arbeiten, geben neue, vom Original abgeleitete Zeichenketten zur√ºck.
Die Operatoren (``in``, ``+`` und ``*``) und eingebauten Funktionen (``len``,
``max`` und ``min``) arbeiten mit Zeichenketten genauso wie mit Listen und
Tupeln.

.. code-block:: pycon

   >>> welcome = "Hello pythonistas!\n"
   >>> 2 * welcome
   'Hello pythonistas!\nHello pythonistas!\n'
   >>> welcome + welcome
   'Hello pythonistas!\nHello pythonistas!\n'
   >>> "python" in welcome
   True
   >>> max(welcome)
   'y'
   >>> min(welcome)
   '\n'

Die Index- und Slice-Notation funktioniert auf die gleiche Weise, um Elemente
oder Slices zu erhalten:

.. code-block:: pycon

   >>> welcome[0:5]
   'Hello'
   >>> welcome[6:-1]
   'pythonistas!'

Die Index- und Slice-Notation kann jedoch nicht verwendet werden, um Elemente
hinzuzuf√ºgen, zu entfernen oder zu ersetzen:

.. code-block:: pycon

   >>> welcome[6:-1] = "everybody!"
   Traceback (most recent call last):
     File "<stdin>", line 1, in <module>
   TypeError: 'str' object does not support item assignment

``string``
----------

F√ºr Zeichenketten gibt es in der Standard-Python-Bibliothek :doc:`string
<python3:library/string>` mehrere Methoden, um mit ihrem Inhalt zu arbeiten
:abbr:`u.a. (unter anderem)` :py:meth:`str.split`, :py:meth:`str.replace` und
:py:meth:`str.strip`:

.. code-block:: pycon

   >>> welcome = "hello pythonistas!\n"
   >>> welcome.isupper()
   False
   >>> welcome.isalpha()
   False
   >>> welcome[0:5].isalpha()
   True
   >>> welcome.capitalize()
   'Hello pythonistas!\n'
   >>> welcome.title()
   'Hello Pythonistas!\n'
   >>> welcome.strip()
   'Hello pythonistas!'
   >>> welcome.split(" ")
   ['hello', 'pythonistas!\n']
   >>> chunks = [snippet.strip() for snippet in welcome.split(" ")]
   >>> chunks
   ['hello', 'pythonistas!']
   >>> " ".join(chunks)
   'hello pythonistas!'
   >>> welcome.replace("\n", "")
   'hello pythonistas!'

Im Folgenden findet ihr einen √úberblick √ºber die h√§ufigsten
:ref:`String-Methoden <python3:string-methods>`:

+---------------------------+---------------------------------------------------------------+
| Methode                   | Beschreibung                                                  |
+===========================+===============================================================+
| :py:meth:`str.count`      | gibt die Anzahl der sich nicht √ºberschneidenden Vorkommen der |
|                           | Zeichenkette zur√ºck.                                          |
+---------------------------+---------------------------------------------------------------+
| :py:meth:`str.endswith`   | gibt ``True`` zur√ºck, wenn die Zeichenkette mit dem Suffix    |
|                           | endet.                                                        |
+---------------------------+---------------------------------------------------------------+
| :py:meth:`str.startswith` | gibt ``True`` zur√ºck, wenn die Zeichenkette mit dem Pr√§fix    |
|                           | beginnt.                                                      |
+---------------------------+---------------------------------------------------------------+
| :py:meth:`str.join`       | verwendet die Zeichenkette als Begrenzer f√ºr die Verkettung   |
|                           | einer Folge anderer Zeichenketten.                            |
+---------------------------+---------------------------------------------------------------+
| :py:meth:`str.index`      | gibt die Position des ersten Zeichens in der Zeichenkette     |
|                           | zur√ºck, wenn es in der Zeichenkette gefunden wurde; l√∂st einen|
|                           | ``ValueError`` aus, wenn es nicht gefunden wurde.             |
+---------------------------+---------------------------------------------------------------+
| :py:meth:`str.find`       | gibt die Position des ersten Zeichens des ersten Vorkommens   |
|                           | der Teilzeichenkette in der Zeichenkette zur√ºck; wie          |
|                           | ``index``, gibt aber ``-1`` zur√ºck, wenn nichts gefunden      |
|                           | wurde.                                                        |
+---------------------------+---------------------------------------------------------------+
| :py:meth:`str.rfind`      | R√ºckgabe der Position des ersten Zeichens des letzten         |
|                           | Vorkommens der Teilzeichenkette in der Zeichenkette; gibt     |
|                           | ``-1`` zur√ºck, wenn nichts gefunden wurde.                    |
+---------------------------+---------------------------------------------------------------+
| :py:meth:`str.replace`    | ersetzt Vorkommen einer Zeichenkette durch eine andere        |
|                           | Zeichenkette.                                                 |
+---------------------------+---------------------------------------------------------------+
| :py:meth:`str.strip`,     | schneiden Leerzeichen ab, einschlie√ülich Zeilenumbr√ºchen.     |
| :py:meth:`str.rstrip`,    |                                                               |
| :py:meth:`str.lstrip`     |                                                               |
+---------------------------+---------------------------------------------------------------+
| :py:meth:`str.split`      | zerlegt eine Zeichenkette in eine Liste von Teilzeichenketten |
|                           | unter Verwendung des √ºbergebenen Trennzeichens.               |
+---------------------------+---------------------------------------------------------------+
| :py:meth:`str.lower`      | konvertiert alphabetische Zeichen in Kleinbuchstaben.         |
+---------------------------+---------------------------------------------------------------+
| :py:meth:`str.upper`      | konvertiert alphabetische Zeichen in Gro√übuchstaben.          |
+---------------------------+---------------------------------------------------------------+
| :py:meth:`str.casefold`   | konvertiert Zeichen in Kleinbuchstaben und konvertiert alle   |
|                           | regionsspezifischen variablen Zeichenkombinationen in eine    |
|                           | gemeinsame vergleichbare Form.                                |
+---------------------------+---------------------------------------------------------------+
| :py:meth:`str.ljust`,     | linksb√ºndig bzw. rechtsb√ºndig; f√ºllt die gegen√ºberliegende    |
| :py:meth:`str.rjust`      | Seite der Zeichenkette mit Leerzeichen (oder einem anderen    |
|                           | F√ºllzeichen) auf, um eine Zeichenkette mit einer Mindestbreite|
|                           | zu erhalten.                                                  |
+---------------------------+---------------------------------------------------------------+

Dar√ºber hinaus gibt es einige Methoden, mit denen die Eigenschaft einer
Zeichenkette √ºberpr√ºft werden kann:

+---------------------------+---------------+---------------+---------------+---------------+---------------+
| Methode                   | ``[!#$%‚Ä¶]``   | ``[a-zA-Z]``  | ``[¬º¬Ω¬æ]``     | ``[¬π¬≤¬≥]``     | ``[0-9]``     |
+===========================+===============+===============+===============+===============+===============+
| :py:meth:`str.isprintable`| ‚úÖ            | ‚úÖ            | ‚úÖ            | ‚úÖ            | ‚úÖ            |
+---------------------------+---------------+---------------+---------------+---------------+---------------+
| :py:meth:`str.isalnum`    | ‚ùå            | ‚úÖ            | ‚úÖ            | ‚úÖ            | ‚úÖ            |
+---------------------------+---------------+---------------+---------------+---------------+---------------+
| :py:meth:`str.isnumeric`  | ‚ùå            | ‚ùå            | ‚úÖ            | ‚úÖ            | ‚úÖ            |
+---------------------------+---------------+---------------+---------------+---------------+---------------+
| :py:meth:`str.isdigit`    | ‚ùå            | ‚ùå            | ‚ùå            | ‚úÖ            | ‚úÖ            |
+---------------------------+---------------+---------------+---------------+---------------+---------------+
| :py:meth:`str.isdecimal`  | ‚ùå            | ‚ùå            | ‚ùå            | ‚ùå            | ‚úÖ            |
+---------------------------+---------------+---------------+---------------+---------------+---------------+

:py:meth:`str.isspace` pr√ºft auf Leerzeichen:
``[ \t\n\r\f\v\x1c-\x1f\x85\xa0\u1680‚Ä¶]``.

``re``
------

Die Python-Standard-Bibliothek :doc:`re <python3:library/re>` enth√§lt ebenfalls
Funktionen f√ºr die Arbeit mit Zeichenketten. Dabei bietet ``re`` ausgefeiltere
M√∂glichkeiten zur Musterextraktion und -ersetzung als ``string``.

.. code-block:: pycon

   >>> import re
   >>> re.sub("\n", "", welcome)
   'Hello pythonistas!'

Hier wird der regul√§re Ausdruck zun√§chst kompiliert und dann seine
:py:meth:`re.Pattern.sub`-Methode f√ºr den √ºbergebenen Text aufgerufen. Ihr k√∂nnt
den Ausdruck selbst mit :py:func:`re.compile` kompilieren und so ein
wiederverwendbares ``regex``-Objekt bilden, das auf unterschiedliche
Zeichenketten angewendet die CPU-Zyklen verringert:

.. code-block:: pycon

   >>> regex = re.compile("\n")
   >>> regex.sub("", welcome)
   'Hello pythonistas!'

Wenn ihr stattdessen eine Liste aller Muster erhalten m√∂chtet, die dem
``regex``-Objekt entsprechen, k√∂nnt ihr die
:py:meth:`re.Pattern.findall`-Methode verwenden:

.. code-block:: pycon

   >>> regex.findall(welcome)
   ['\n']

.. note::
   Um das umst√§ndliche Escaping mit ``\`` in einem regul√§ren Ausdruck zu
   vermeiden, k√∂nnt ihr rohe String-Literale wie ``r'C:\PATH\TO\FILE'``
   anstelle des  entsprechenden ``'C:\\PATH\\TO\\FILE'`` verwenden.

:py:meth:`re.Pattern.match` und :py:meth:`re.Pattern.search` sind eng mit
:py:meth:`re.Pattern.findall` verwandt. W√§hrend ``findall`` alle
√úbereinstimmungen in einer Zeichenkette zur√ºckgibt, gibt ``search`` nur die
erste √úbereinstimmung und ``match`` nur √úbereinstimmungen am Anfang der
Zeichenkette zur√ºck. Als weniger triviales Beispiel betrachten wir einen
Textblock und einen regul√§ren Ausdruck, der die meisten E-Mail-Adressen
identifizieren kann:

.. code-block:: pycon

   >>> addresses = """Veit <veit@cusy.io>
   ... Veit Schiele <veit.schiele@cusy.io>
   ... cusy GmbH <info@cusy.io>
   ... """
   >>> pattern = r"[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,4}"
   >>> regex = re.compile(pattern, flags=re.IGNORECASE)
   >>> regex.findall(addresses)
   ['veit@cusy.io', 'veit.schiele@cusy.io', 'info@cusy.io']
   >>> regex.search(addresses)
   <re.Match object; span=(6, 18), match='veit@cusy.io'>
   >>> print(regex.match(addresses))
   None

``regex.match`` gibt ``None`` zur√ºck, da das Muster nur dann passt, wenn es am
Anfang der Zeichenkette steht.

Angenommen, ihr m√∂chtet E-Mail-Adressen finden und gleichzeitig jede Adresse in
ihre drei Komponenten aufteilen:

#. Personenname
#. Dom√§nenname
#. Dom√§nensuffix

Dazu setzt ihr zun√§chst runde Klammern ``()`` um die zu segmentierenden Teile
des Musters:

.. code-block:: pycon

   >>> pattern = r"([A-Z0-9._%+-]+)@([A-Z0-9.-]+)\.([A-Z]{2,4})"
   >>> regex = re.compile(pattern, flags=re.IGNORECASE)
   >>> match = regex.match("veit@cusy.io")
   >>> match.groups()
   ('veit', 'cusy', 'io')

:py:meth:`re.Match.groups` gibt ein :doc:`tuples` zur√ºck, das alle Untergruppen
der √úbereinstimmung enth√§lt.

:py:meth:`re.Pattern.findall` gibt eine Liste von Tupeln zur√ºck, wenn das Muster
Gruppen enth√§lt:

.. code-block:: pycon

   >>> regex.findall(addresses)
   [('veit', 'cusy', 'io'), ('veit.schiele', 'cusy', 'io'), ('info', 'cusy', 'io')]

Auch in :py:meth:`re.Pattern.sub` k√∂nnen Gruppen verwendet werden wobei ``\1``
f√ºr die erste √ºbereinstimmende Gruppe steht, ``\2`` f√ºr die zweite :abbr:`usw.
(und so weiter)`:

.. code-block:: pycon

   >>> regex.findall(addresses)
   [('veit', 'cusy', 'io'), ('veit.schiele', 'cusy', 'io'), ('info', 'cusy', 'io')]
   >>> print(regex.sub(r"Username: \1, Domain: \2, Suffix: \3", addresses))
   Veit <Username: veit, Domain: cusy, Suffix: io>
   Veit Schiele <Username: veit.schiele, Domain: cusy, Suffix: io>
   cusy GmbH <Username: info, Domain: cusy, Suffix: io>

Die folgende Tabelle enth√§lt einen kurzen √úberblick √ºber Methoden f√ºr regul√§re
Ausdr√ºcke:

+-------------------------------+-------------------------------------------------------------------------------+
| Methode                       | Beschreibung                                                                  |
+===============================+===============================================================================+
| :py:func:`re.findall`         | gibt alle sich nicht √ºberschneidenden √ºbereinstimmenden Muster in einer       |
|                               | Zeichenkette als Liste zur√ºck.                                                |
+-------------------------------+-------------------------------------------------------------------------------+
| :py:func:`re.finditer`        | wie ``findall``, gibt aber einen Iterator zur√ºck.                             |
+-------------------------------+-------------------------------------------------------------------------------+
| :py:func:`re.match`           | entspricht dem Muster am Anfang der Zeichenkette und segmentiert optional die |
|                               | Musterkomponenten in Gruppen; wenn das Muster √ºbereinstimmt, wird ein         |
|                               | ``match``-Objekt zur√ºckgegeben, andernfalls keines.                           |
+-------------------------------+-------------------------------------------------------------------------------+
| :py:func:`re.search`          | durchsucht die Zeichenkette nach √úbereinstimmungen mit dem Muster; gibt in    |
|                               | diesem Fall ein ``match``-Objekt zur√ºck; im Gegensatz zu ``match`` kann die   |
|                               | √úbereinstimmung an einer beliebigen Stelle der Zeichenkette und nicht nur am  |
|                               | Anfang stehen.                                                                |
+-------------------------------+-------------------------------------------------------------------------------+
| :py:func:`re.split`           | zerlegt die Zeichenkette bei jedem Auftreten des Musters in Teile.            |
+-------------------------------+-------------------------------------------------------------------------------+
| :py:func:`re.sub`,            | ersetzt alle (``sub``) oder die ersten ``n`` Vorkommen (``subn``) des Musters |
| :py:func:`re.subn`            | in der Zeichenkette durch einen Ersetzungsausdruck; verwendet die Symbole     |
|                               | ``\1``, ``\2``, ‚Ä¶, um auf die Elemente der √úbereinstimmungsgruppe zu          |
|                               | verweisen.                                                                    |
+-------------------------------+-------------------------------------------------------------------------------+
| :py:meth:`str.removeprefix`   | In Python 3.9 kann dies verwendet werden, um das Suffix oder den Dateinamen   |
| :py:meth:`str.removesuffix`   | zu extrahieren.                                                               |
+-------------------------------+-------------------------------------------------------------------------------+


.. seealso::
   * :doc:`../../appendix/regex`
   * :doc:`python3:howto/regex`
   * :doc:`python3:library/re`

``print()``
-----------

Die Funktion :func:`print` gibt Zeichenketten aus wobei andere Python-Datentypen
leicht in Strings umgewandelt und formatiert werden k√∂nnen, :abbr:`z.B. (zum
Beispiel)`:

.. code-block:: pycon

   >>> import math
   >>> pi = math.pi
   >>> d = 28
   >>> u = pi * d
   >>> print(
   ...     "Pi ist",
   ...     pi,
   ...     "und der Umfang bei einem Durchmesser von",
   ...     d,
   ...     "Zoll ist",
   ...     u,
   ...     "Zoll.",
   ... )
   Pi ist 3.141592653589793 und der Umfang bei einem Durchmesser von 28 Zoll ist 87.96459430051421 Zoll.

F-Strings
~~~~~~~~~

Mit F-Strings lassen sich die f√ºr einen Text zu detaillierten Zahlen k√ºrzen:

.. code-block:: pycon

   >>> print(f"Der Wert von Pi ist {pi:.3f}.")
   Der Wert von Pi ist 3.142.

In ``{pi:.3f}`` wird die Format-Spezifikation ``f`` verwendet, um die Zahl Pi
auf drei Nachkommastellen zu k√ºrzen.

In A/B-Testszenarien m√∂chtet ihr oft die prozentuale Ver√§nderung einer Kennzahl
darstellen. Mit F-Strings k√∂nnen sie verst√§ndlich formuliert werden:

.. code-block:: pycon

   >>> metrics = 0.814172
   >>> print(f"Die AUC hat sich vergr√∂√üert auf {metrics:=+7.2%}")
   Die AUC hat sich vergr√∂√üert auf +81.42%

In diesem Beispiel wird die Variable ``metrics`` formatiert, wobei ``=`` die
Inhalte der Variable nach dem ``+`` √ºbernimmt, wobei insgesamt sieben Zeichen
einschlie√ülich des Vorzeichen, ``metrics`` und des Prozentzeichens angezeigt
werden. ``.2`` sorgt f√ºr zwei Dezimalstellen, w√§hrend das ``%``-Symbol den
Dezimalwert in eine Prozentzahl umwandelt. So wird ``0.514172`` in ``+51.42%``
umgewandelt.

Werte lassen sich auch in bin√§re und hexadezimale Werte umrechnen:

.. code-block:: pycon

   >>> block_size = 192
   >>> print(f"Binary block size: {block_size:b}")
   Binary block size: 11000000
   >>> print(f"Hex block size: {block_size:x}")
   Hex block size: c0

Es gibt auch Formatierungsangaben, die ideal geeignet sind f√ºr die :abbr:`CLI
(Command Line Interface)`-Ausgabe, :abbr:`z.B. (zum Beispiel)`:

.. code-block:: pycon

   >>> data_types = [(7, "Data types", 19), (7.1, "Numbers", 19), (7.2, "Lists", 23)]
   >>> for n, title, page in data_types:
   ...     print(f"{n:.1f} {title:.<25} {page: >3}")
   ...
   7.0 Data types...............  19
   7.1 Numbers..................  19
   7.2 Lists....................  23

Allgemein sieht das Format folgenderma√üen aus, wobei alle Angaben in eckigen
Klammern optional sind:

:samp:`:[[FILL]ALIGN][SIGN][0b|0o|0x|d|n][0][WIDTH][GROUPING]["." PRECISION][TYPE]`

In der folgenden Tabelle sind die Felder f√ºr die Zeichenkettenformatierung und
ihre Bedeutung aufgef√ºhrt:

+-----------------------+-------------------------------------------------------+
| Feld                  | Bedeutung                                             |
+=======================+=======================================================+
| :samp:`FILL`          | Zeichen, das zum Ausf√ºllen von :samp:`ALIGN` verwendet|
|                       | wird. Der Standardwert ist ein Leerzeichen.           |
+-----------------------+-------------------------------------------------------+
| :samp:`ALIGN`         | Textausrichtung und F√ºllzeichen:                      |
|                       |                                                       |
|                       | | ``<``: linksb√ºndig                                  |
|                       | | ``>``: rechtsb√ºndig                                 |
|                       | | ``^``: zentriert                                    |
|                       | | ``=``: F√ºllzeichen nach :samp:`SIGN`                |
+-----------------------+-------------------------------------------------------+
| :samp:`SIGN`          | Vorzeichen anzeigen:                                  |
|                       |                                                       |
|                       | | ``+``: Vorzeichen bei positiven und negativen       |
|                       |    Zahlen anzeigen                                    |
|                       | | ``-``: Standardwert, ``-`` nur bei negativen Zahlen |
|                       |   oder Leerzeichen bei positiven Zahlen               |
+-----------------------+-------------------------------------------------------+
| :samp:`0b|0o|0x|d|n`  | Vorzeichen f√ºr ganze Zahlen:                          |
|                       |                                                       |
|                       | | ``0b``: Bin√§rzahlen                                 |
|                       | | ``0o``: Oktalzahlen                                 |
|                       | | ``0x``: Hexadezimalzahlen                           |
|                       | | ``d``: Standardwert, dezimale Ganzzahl zur Basis 10 |
|                       | | ``n``: verwendet die aktuelle                       |
|                       |   ``locale``-Einstellung, um die entsprechenden       |
|                       |   Zahlentrennzeichen einzuf√ºgen                       |
+-----------------------+-------------------------------------------------------+
| :samp:`0`             | f√ºllt mit Nullen auf                                  |
+-----------------------+-------------------------------------------------------+
| :samp:`WIDTH`         | Minimale Feldbreite                                   |
+-----------------------+-------------------------------------------------------+
| :samp:`GROUPING`      | Zahlentrennzeichen: [#]_                              |
|                       |                                                       |
|                       | | ``,``: Komma als Tausendertrennzeichen              |
|                       | | ``_``: Unterstrich f√ºr Tausendertrennzeichen        |
+-----------------------+-------------------------------------------------------+
| :samp:`.PRECISION`    | | Bei Flie√ükommazahlen die Anzahl der Ziffern nach    |
|                       |   dem Punkt                                           |
|                       | | bei nicht-numerischen Werten die maximale L√§nge     |
+-----------------------+-------------------------------------------------------+
| :samp:`TYPE`          | Ausgabeformat als Zahlentyp oder Zeichenkette         |
|                       |                                                       |
|                       | ‚Ä¶ f√ºr Ganzzahlen:                                     |
|                       |                                                       |
|                       | | ``b``: Bin√§rformat                                  |
|                       | | ``c``: konvertiert die Ganzzahl in das              |
|                       |   entsprechende Unicode-Zeichen                       |
|                       | | ``d``: Standardwert, Dezimalzeichen                 |
|                       | | ``n``: dasselbe wie ``d``, mit dem Unterschied,     |
|                       |   dass es die aktuelle ``locale``-Einstellung         |
|                       |   verwendet, um die entsprechenden Zahlentrennzeichen |
|                       |   einzuf√ºgen                                          |
|                       | | ``o``: Oktalformat                                  |
|                       | | ``x``: Hexadezimalformat zur Basis 16, wobei f√ºr    |
|                       |   die Ziffern √ºber 9 Kleinbuchstaben verwendet werden |
|                       | | ``X``: Hexadezimalformat zur Basis 16, wobei f√ºr    |
|                       |   die Ziffern √ºber 9 Gro√übuchstaben verwendet werden  |
|                       |                                                       |
|                       | ‚Ä¶ f√ºr Flie√ükommazahlen:                               |
|                       |                                                       |
|                       | | ``e``: Exponent mit ``e`` als Trennzeichen zwischen |
|                       |   Koeffizient und Exponent                            |
|                       | | ``E``: Exponent mit ``E`` als Trennzeichen zwischen |
|                       |   Koeffizient und Exponent                            |
|                       | | ``g``: Standardwert f√ºr Flie√ükommazahlen, wobei der |
|                       |   Exponent eine feste Breite f√ºr gro√üe und            |
|                       |   kleine Zahlen erh√§lt                                |
|                       | | ``G``: Wie ``g``, wechselt aber zu ``E``, wenn      |
|                       |   die Zahl zu gro√ü wird. Die Darstellungen von        |
|                       |   Unendlich und NaN werden ebenfalls in Gro√übuchstaben|
|                       |   geschrieben                                         |
|                       | | ``n``: Wie ``g`` mit dem Unterschied, dass es die   |
|                       |   aktuelle ``locale``-Einstellung verwendet, um die   |
|                       |   die entsprechenden Zahlentrennzeichen einzuf√ºgen    |
|                       | | ``%``: Prozentsatz. Multipliziert die Zahl mit 100  |
|                       |   und zeigt sie im festen Format ``f`` an, gefolgt    |
|                       |   von einem Prozentzeichen                            |
+-----------------------+-------------------------------------------------------+

.. [#] Der Formatbezeichner ``n`` formatiert eine Zahl in einer lokal angepassten
    Weise, :abbr:`z.B. (zum Beispiel)`:

     .. code-block:: pycon

        >>> value = 635372
        >>> import locale
        >>> locale.setlocale(locale.LC_NUMERIC, "en_US.utf-8")
        'en_US.utf-8'
        >>> print(f"{value:n}")
        635,372

.. tip::
   Eine gute Quelle f√ºr F-Strings ist die Hilfe-Funktion:

   .. code-block:: pycon

      >>> help()
      help> FORMATTING
      ...

   Ihr k√∂nnt die Hilfe hier durchbl√§ttern und viele Beispiele finden.

   Mit :kbd:`:`‚Äì:kbd:`q` und :kbd:`‚èé` k√∂nnt ihr die Hilfe-Funktion wieder
   verlassen.

.. seealso::
   * `PyFormat <https://pyformat.info>`_
   * :ref:`python3:f-strings`
   * :pep:`498`

Fehlersuche in F-Strings
::::::::::::::::::::::::

In Python 3.8 wurde ein Spezifizierer eingef√ºhrt, der bei der Fehlersuche in
F-String-Variablen hilft. Durch Hinzuf√ºgen eines Gleichheitszeichens ``=`` wird der
Code innerhalb des F-Strings aufgenommen:

.. code-block:: pycon

   >>> uid = "veit"
   >>> print(f"My name is {uid.capitalize()=}")
   My name is uid.capitalize()='Veit'

Formatierung von Datums-, Zeitformaten und IP-Adressen
::::::::::::::::::::::::::::::::::::::::::::::::::::::

:py:mod:`datetime` unterst√ºtzt die Formatierung von Zeichenketten mit der
gleichen Syntax wie die :py:meth:`strftime <datetime.datetime.strftime>`-Methode
f√ºr diese Objekte.

.. code-block:: pycon

   >>> import datetime
   >>> today = datetime.date.today()
   >>> print(f"Today is {today:%d %B %Y}.")
   Today is 26 November 2023.

Das :py:mod:`ipaddress`-Modul von Python unterst√ºtzt auch die Formatierung von
``IPv4Address``- und ``IPv6Address``-Objekten.

Schlie√ülich k√∂nnen Bibliotheken von Drittanbietern auch ihre eigene
Unterst√ºtzung f√ºr die Formatierung von Strings hinzuf√ºgen, indem sie eine
``__format__``-Methode zu ihren Objekten hinzuf√ºgen.

.. seealso::
   * :ref:`format-codes`
   * `Python strftime cheatsheet <https://strftime.org>`_

Eingebaute Module f√ºr Zeichenketten
-----------------------------------

Die Python-Standardbibliothek enth√§lt eine Reihe eingebauter Module, mit denen
ihr Zeichenketten managen k√∂nnt:

.. _string-modules:

+-----------------------+-------------------------------------------------------------------------------+
| Modul                 | Beschreibung                                                                  |
+=======================+===============================================================================+
| :py:mod:`string`      | vergleicht mit Konstanten wie :py:data:`string.digits` oder                   |
|                       | :py:data:`string.whitespace`                                                  |
+-----------------------+-------------------------------------------------------------------------------+
| :py:mod:`re`          | sucht und ersetzt Text mit regul√§ren Ausdr√ºcken                               |
+-----------------------+-------------------------------------------------------------------------------+
| :py:mod:`struct`      | konvertiert zwischen Python-Werten und C-Strukturen, die als                  |
|                       | Python-Bytes-Objekte dargestellt werden.                                      |
+-----------------------+-------------------------------------------------------------------------------+
| :py:mod:`difflib`     | hilft beim Berechnen von Deltas, beim Auffinden von Unterschieden zwischen    |
|                       | Zeichenketten oder Sequenzen und beim Erstellen von Patches und Diff-Dateien  |
+-----------------------+-------------------------------------------------------------------------------+
| :py:mod:`textwrap`    | umbricht und f√ºllt Text, formatiert Text mit Zeilenumbr√ºchen oder Leerzeichen |
+-----------------------+-------------------------------------------------------------------------------+

.. seealso::
   * :doc:`Manipulation von Zeichenketten mit pandas
     <Python4DataScience:workspace/pandas/string-manipulation>`

Checks
------

* K√∂nnt ihr :abbr:`z.B. (zum Beispiel)` eine Zeichenkette mit einer ganzen Zahl
  addieren oder multiplizieren, oder mit einer Gleitkommazahl oder einer
  komplexen Zahl?

* Wie k√∂nnt ihr eine √úberschrift wie ``variables and expressions`` so ab√§ndern,
  dass sie keine Leerzeichen mehr enth√§lt und besser als Dateinamen verwendet
  werden kann?

* Welche der folgenden Zeichenketten k√∂nnen nicht in Zahlen umgewandelt werden
  und warum?

  * ``int("1e2")``
  * ``int(1e+2)``
  * ``int("1+2")``
  * ``int("+2")``

* Wenn ihr √ºberpr√ºfen wollt, ob eine Zeile mit ``.. note::`` begintt, welche
  Methode w√ºrdet ihr verwenden? Gibt es auch noch andere M√∂glichkeiten?

* Angenommen, ihr habt eine Zeichenkette mit Satzzeichen, Anf√ºhrungszeichen und
  Zeilenumbr√ºchen. Wie k√∂nnen diese aus der Zeichenkette entfernt werden?

* Welche Anwendungsf√§lle k√∂nnt ihr euch vorstellen, in denen das
  :mod:`python3:struct`-Modul f√ºr das Lesen oder Schreiben von Bin√§rdaten
  n√ºtzlich w√§re?

  * beim Lesen und Schreiben einer Bin√§rdatei
  * beim Lesen von einer externen Schnittstelle, wobei die Daten genau so
    gespeichert werden sollen, wie sie √ºbermittelt wurden

* Welchen regul√§ren Ausdruck w√ºrdet ihr verwenden, um Zeichenfolgen zu finden,
  die die Zahlen zwischen -3 und +3 darstellen?

* Welchen regul√§ren Ausdruck w√ºrdet ihr verwenden, um Hexadezimalwerte zu
  finden?
